(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pedido-pedido-module"], {
  /***/
  "./node_modules/raw-loader/dist/cjs.js!./src/app/pedido/pedido.page.html":
  /*!*******************************************************************************!*\
    !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pedido/pedido.page.html ***!
    \*******************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesRawLoaderDistCjsJsSrcAppPedidoPedidoPageHtml(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "<ion-header>\n  <ion-toolbar mode='ios'>\n    <ion-buttons slot=\"start\">\n      <ion-buttons slot=\"start\">\n        <a (click)=\"routerlink_api('/cardapio/' + id)\">\n          <h3><ion-icon style=\"color: white;\" name=\"arrow-back\"></ion-icon></h3>\n        </a>\n      </ion-buttons>\n    </ion-buttons>\n    <ion-title>Fechar Pedido</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content fullscreen class=\"ion-padding\">\n  <div >\n    <ion-card>\n      <ion-card-header> \n        <ion-card-subtitle>\n          <font color=\"black\">Pedido</font>\n        </ion-card-subtitle>\n        <br>\n        <div class=\"line\"></div>\n        <br>\n        <div *ngFor=\"let carrinho_s of produtos\">\n        <ion-card-subtitle>\n            <font color=\"#000\"><h3>Produto</h3></font>\n          </ion-card-subtitle>\n          <ion-text color=\"black\"> {{ carrinho_s.quantidade }}x {{ carrinho_s.nome }} - <b>{{ precos(carrinho_s.preco) }}\n              (cada)</b></ion-text><br>\n          <br>\n          <div *ngFor=\"let acre of carrinho_s.adicionais\">\n            <div *ngIf=\"acre != null\">\n              <ion-card-subtitle>\n                <font color=\"black\">{{ get_categoria(acre.de) }}</font>\n              </ion-card-subtitle>\n              <ion-text color=\"black\"> {{ acre.nome }} - <b>R${{ acre.preco }} ({{ acre.quantidade }}x)</b></ion-text>\n            </div>\n            <br>\n          </div>\n          <div *ngFor=\"let acre of carrinho_s.adicionais_prev\">\n            <div *ngIf=\"acre != null\">\n              <ion-card-subtitle>\n                <font color=\"black\">{{ get_categoria(acre.de) }}</font>\n              </ion-card-subtitle>\n              <ion-text color=\"black\">{{ acre.nome }} - <b>{{ precos(acre.preco) }} ({{ acre.quantidade }}x)</b></ion-text>\n            </div>\n            <br>\n          </div>\n          <div *ngFor=\"let acre of carrinho_s.adicionais_gratis\">\n            <div *ngIf=\"acre != null\">\n              <ion-card-subtitle>\n                <font color=\"black\">{{ get_categoria(acre.de) }}</font>\n              </ion-card-subtitle> \n              <ion-text color=\"black\">{{ acre.nome }} - <b>{{ precos(acre.preco) }}  ({{ acre.quantidade }}x)</b></ion-text>\n            </div>\n            <br>\n          </div>\n          <br>\n          <a (click)='remove_item(carrinho_s)'>Remover item</a><br>\n          <br>\n          <div class=\"line\"></div>\n          <br>\n        </div>\n  </ion-card-header>\n      <ion-card-content style=\"text-transform: uppercase\">\n        <b>FRETE</b> {{ precos(frete) }} <br>\n        <b>TOTAL</b>\n        <ion-text style=\"text-transform: uppercase\">\n         {{ precos(this.total_carrinho) }}<br>\n        </ion-text>\n      </ion-card-content>\n    </ion-card>\n    <ion-card *ngIf=\"new_address == false\">\n      <ion-card-header>\n        <ion-card-subtitle>\n          <font color=\"black\">Endereço de entrega</font>\n        </ion-card-subtitle>\n        <br>\n        <ion-card-subtitle>\n          <font color=\"black\">{{ this.myaccount.endereco }}</font>\n        </ion-card-subtitle>\n        <ion-card-subtitle>\n          <font color=\"black\">{{ this.myaccount.cidade }} - {{ this.myaccount.bairro }}</font>\n        </ion-card-subtitle>\n        <br>\n        <a (click)='new_address=true'>Escolher outro</a>\n      </ion-card-header>\n    </ion-card>\n    <ion-card *ngIf=\"new_address == true\">\n      <ion-card-header>\n        <ion-card-subtitle>\n          <font color=\"black\">Endereço de entrega</font>\n        </ion-card-subtitle>\n        <br>\n        <ion-list>\n          <ion-item>\n            <ion-input type='text' placeholder='Endereço' [(ngModel)]='endereco'></ion-input>\n          </ion-item>\n          <ion-item>\n            <ion-input type='text' placeholder='Número' [(ngModel)]='numero_s'></ion-input>\n          </ion-item>\n          <ion-item>\n            <ion-select [(ngModel)]='bairro_s' placeholder=\"Bairro\" (ionChange)=\"changefrete()\">\n              <ion-select-option *ngFor=\"let bairro of bairros\">{{bairro.nome}}</ion-select-option>\n            </ion-select>\n          </ion-item>\n          <ion-item>\n            <ion-input type='text' placeholder='Cidade' [(ngModel)]='uf'></ion-input>\n          </ion-item>\n          <ion-item>\n            <ion-input type='text' placeholder='Estado' [(ngModel)]='estado'></ion-input>\n          </ion-item>\n          <ion-item>\n            <ion-input type='text' placeholder='Complemento' [(ngModel)]='complemento_s'></ion-input>\n          </ion-item>\n        </ion-list>\n        <br>\n        <a (click)='new_address=false; cancelchange()'>Cancelar</a>\n      </ion-card-header>\n    </ion-card>\n    <ion-card>\n      <ion-card-header>\n        <ion-card-subtitle>\n          <font color=\"black\">Observações</font>\n        </ion-card-subtitle>\n        <ion-input [(ngModel)]=\"obs_s\" type=\"text\" placeholder=\"Exemplo: retirar tomate\"></ion-input>\n      </ion-card-header>\n    </ion-card>\n    <ion-card>\n      <ion-card-header>\n        <ion-card-subtitle>\n          <font color=\"black\">Cupom de desconto</font>\n        </ion-card-subtitle>\n        <ion-input [(ngModel)]=\"cupom_s\" type=\"text\" placeholder=\"Digite seu cupom\"></ion-input>\n        <a (click)=\"cupom()\">Aplicar</a>\n      </ion-card-header>\n    </ion-card>\n    <ion-card>\n      <ion-card-header>\n        <ion-card-subtitle>\n          <font color=\"black\">PAGAMENTO</font>\n        </ion-card-subtitle>\n      </ion-card-header>\n      <ion-card-content>\n\n        <ion-item> \n          <ion-label>Como deseja pagar?</ion-label>\n          <ion-select [(ngModel)]='pedir_s' interface=\"action-sheet\" okText=\"Escolher\" cancelText=\"Cancelar\">\n            <ion-select-option value=\"dinheiro\">Dinheiro</ion-select-option>\n            <ion-select-option value=\"cartao\">Cartão (Crédido ou débito)</ion-select-option>\n          </ion-select>\n        </ion-item>\n        \n\n      </ion-card-content>\n    </ion-card>\n\n    <ion-button size='block' (click)='pedir()' color=\"dark\">Fazer pedido</ion-button>\n    \n  </div >\n</ion-content>\n\n\n\n\n\n\n\n\n\n\n<style>\n  ion-item {\n    --background: #fff;\n    --color: #000\n  }\n\n  ion-card {\n    --background: #fff;\n    --color: #000\n  }\n\n  .line {\n    width: 100%;\n    height: 1px;\n    background-color: black;\n  }\n</style>";
    /***/
  },

  /***/
  "./src/app/pedido/pedido.module.ts":
  /*!*****************************************!*\
    !*** ./src/app/pedido/pedido.module.ts ***!
    \*****************************************/

  /*! exports provided: PedidoPageModule */

  /***/
  function srcAppPedidoPedidoModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PedidoPageModule", function () {
      return PedidoPageModule;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/fesm2015/forms.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/fesm2015/router.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var _pedido_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./pedido.page */
    "./src/app/pedido/pedido.page.ts");

    const routes = [{
      path: '',
      component: _pedido_page__WEBPACK_IMPORTED_MODULE_6__["PedidoPage"]
    }];
    let PedidoPageModule = class PedidoPageModule {};
    PedidoPageModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"], _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonicModule"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"].forChild(routes)],
      declarations: [_pedido_page__WEBPACK_IMPORTED_MODULE_6__["PedidoPage"]]
    })], PedidoPageModule);
    /***/
  },

  /***/
  "./src/app/pedido/pedido.page.scss":
  /*!*****************************************!*\
    !*** ./src/app/pedido/pedido.page.scss ***!
    \*****************************************/

  /*! exports provided: default */

  /***/
  function srcAppPedidoPedidoPageScss(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BlZGlkby9wZWRpZG8ucGFnZS5zY3NzIn0= */";
    /***/
  },

  /***/
  "./src/app/pedido/pedido.page.ts":
  /*!***************************************!*\
    !*** ./src/app/pedido/pedido.page.ts ***!
    \***************************************/

  /*! exports provided: PedidoPage */

  /***/
  function srcAppPedidoPedidoPageTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PedidoPage", function () {
      return PedidoPage;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/fesm2015/router.js");
    /* harmony import */


    var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../services/data.service */
    "./src/app/services/data.service.ts");
    /* harmony import */


    var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @ionic-native/http/ngx */
    "./node_modules/@ionic-native/http/ngx/index.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var ngx_xml2json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ngx-xml2json */
    "./node_modules/ngx-xml2json/fesm2015/ngx-xml2json.js");
    /* harmony import */


    var _ionic_native_in_app_browser_ngx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @ionic-native/in-app-browser/ngx */
    "./node_modules/@ionic-native/in-app-browser/ngx/index.js");
    /* harmony import */


    var _config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../config */
    "./src/app/config.ts");

    let PedidoPage = class PedidoPage {
      constructor(ngxXml2jsonService, alertCtrl, router, dataService, http, loadingController, navCtrl, iab, zone) {
        this.ngxXml2jsonService = ngxXml2jsonService;
        this.alertCtrl = alertCtrl;
        this.router = router;
        this.dataService = dataService;
        this.http = http;
        this.loadingController = loadingController;
        this.navCtrl = navCtrl;
        this.iab = iab;
        this.zone = zone;
        this.menuarray = [];
        this.produtos = [];
        this.adicionais = [];
        this.total_carrinho = 0;
        this.teste = "a";
        this.bairros = [];
        this.frete = 0;
        this.restaurante = [];
        this.new_address = false;
        this.frete_status = true;
        this.cats = [];
        this.admin = false;
        this.horario = "";
        this.prices = [];
        this.zone.run(() => {
          this.gethorario();
          this.id = JSON.parse(localStorage.getItem('restaurante'))['id'];
          const datauser = JSON.parse(localStorage.getItem('cliente_data'));

          if (datauser == null) {
            this.logado = false;
            this.navCtrl.navigateRoot('/minha-conta');
          } else {
            this.logado = true;
            this.myaccount = datauser;
          }

          this.http.get(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/bairros', {}, {}).then(data => {
            this.bairros = JSON.parse(data.data);
          });
          this.restaurante = JSON.parse(localStorage.getItem('restaurante'));
          var fretamento = JSON.parse(this.restaurante['fretes']);

          for (let frete in fretamento) {
            this.frete = Number(fretamento[this.myaccount['bairro']]);
          }

          const data = JSON.parse(localStorage.getItem('carrinho'));

          if (data == null) {} else {
            var id = this.router.url.replace('/pedido/', '');
            data.forEach(it => {
              if (it['restaurante'] == id) {
                this.produtos.push({
                  restaurante: it['restaurante'],
                  nome: it['nome'],
                  adicionais: it['adicionais'],
                  adicionais_prev: it['adicionais_prev'],
                  adicionais_gratis: it['adicionais_gratis'],
                  id: it['id'],
                  obs: this.obs_s,
                  quantidade: it['quantidade'],
                  preco: it['preco'],
                  tipo: it['tipo']
                });
              }
            });
            this.http.get(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/categorias', {}, {}).then(data => {
              var datajson = JSON.parse(data.data);
              this.cats = datajson;
            });

            if (fretamento[this.myaccount['bairro']] == undefined) {
              this.alert_OPS('OPS', 'Infelizmente!', 'Esse restaurante não entrega nesse local');
              this.frete_status = false;
              this.frete = Number(0);
            } else {
              this.frete_status = true;
            }

            var product_ony = 0;
            var prices = [];
            this.produtos.forEach(car => {
              if (car['restaurante'] == id) {
                product_ony = 0;
                product_ony = Number(product_ony) + Number(car['preco']); //this.total_carrinho = Number(this.total_carrinho) + Number(car['preco']);

                car['adicionais'].forEach(add => {
                  //this.total_carrinho = Number(this.total_carrinho) + Number(add['preco']);
                  var ftotal = Number(add['preco']) * add['quantidade'];
                  product_ony = Number(product_ony) + Number(ftotal);
                });
                car['adicionais_prev'].forEach(add => {
                  var ftotal = Number(add['preco']) * add['quantidade'];
                  prices.push(ftotal);
                });
                car['adicionais_gratis'].forEach(add => {
                  var ftotal = Number(add['preco']) * add['quantidade'];
                  product_ony = Number(product_ony) + Number(ftotal);
                });

                if (prices.length != 0) {
                  product_ony = Number(product_ony) + Number(Math.max(...prices));
                }

                product_ony = Number(car['quantidade']) * Number(product_ony);
                this.total_carrinho = Number(this.total_carrinho) + Number(product_ony);
              }
            });
            this.total_carrinho = Number(this.total_carrinho) + Number(this.frete);
          }
        });
      }

      get_categoria(eid) {
        var nome;
        this.cats.forEach(e => {
          if (e['id'] == eid) {
            nome = e['nome'];
          }
        });
        return nome;
      }

      precos(string) {
        if (string == 0) {
          return "";
        } else {
          return Number(string).toLocaleString('pt-BR', {
            style: 'currency',
            currency: 'BRL'
          });
        }
      }

      pedir() {
        if (this.pedir_s == null) {
          this.alert_OPS('OPS', 'Escolha um método de pagamento', "");
          return;
        }

        switch (this.pedir_s) {
          case "dinheiro":
            this.entrega();
            break;

          case "cartao":
            this.entrega_cartao();
            break;

          case "buscar":
            this.buscar();
            break;
        }
      }

      gethorario() {
        var data = new Date();
        var dia = data.getDate();
        var mes = data.getMonth();
        var ano = data.getFullYear();
        var hora = data.getHours();
        var minutos = data.getMinutes();
        var str_data = dia + '/' + (mes + 1) + '/' + ano;
        var str_hora = hora + ':' + minutos;
        this.horario = str_data + ' as ' + str_hora;
      }

      cupom() {
        this.http.get(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/cupom?id=' + this.cupom_s, {}, {}).then(datas => {
          if (datas.data == "OPS") {
            this.alert_OPS('OPS', 'Esse cupom não existe', "");
          } else {
            var cup = JSON.parse(datas.data);
            this.cupomarray = JSON.parse(datas.data);

            if (cup['tipo'] == "FRETE_GRATIS") {
              this.alert_OPS('SUCESSO', 'Você adicionou o cupom ' + this.cupom_s, 'Esse cupom oferece frete grátis.');
            } else if (cup['tipo'] == "PORCENTAGEM") {
              this.alert_OPS('SUCESSO', 'Você adicionou o cupom ' + this.cupom_s, 'Esse cupom oferece ' + cup['desconto'].replace('%', '') + '% de desconto.');
            } else if (cup['tipo'] == "TOTAL") {
              this.alert_OPS('SUCESSO', 'Você adicionou o cupom ' + this.cupom_s, 'Esse cupom oferece ' + cup['desconto'].replace('%', '') + 'R$ de desconto.');
            }
          }

          this.setcupom();
        });
      }

      cancelchange() {
        this.restaurante = JSON.parse(localStorage.getItem('restaurante'));
        var fretamento = JSON.parse(this.restaurante['fretes']);

        for (let frete in fretamento) {
          this.frete = Number(fretamento[this.myaccount['bairro']]);
        }

        if (fretamento[this.myaccount['bairro']] == undefined) {
          this.frete = 0;
        }

        this.get_total();
      }

      changefrete() {
        var fretes;
        this.restaurante = JSON.parse(localStorage.getItem('restaurante'));
        var fretamento = JSON.parse(this.restaurante['fretes']);

        if (this.new_address == true) {
          for (let frete in fretamento) {
            fretes = Number(fretamento[this.bairro_s]);
          }

          if (fretamento[this.bairro_s] == undefined) {
            this.alert_OPS('OPS', 'Infelizmente!', 'Esse restaurante não entrega nesse local');
            this.frete_status = false;
            this.bairro_s = this.myaccount['bairro'];
          } else {
            if (!isNaN(fretes)) {
              this.frete = Number(fretes);
            }

            this.frete_status = true;
          }
        } else {
          if (fretamento[this.myaccount['bairro']] == undefined) {
            this.alert_OPS('OPS', 'Infelizmente!', 'Esse restaurante não entrega nesse local');
            this.frete_status = false;
            this.bairro_s = this.myaccount['bairro'];
          } else {
            if (!isNaN(fretes)) {
              this.frete = Number(fretes);
            }

            this.frete_status = true;
          }
        }

        this.get_total();
      }

      get_total() {
        this.total_carrinho = 0;
        var product_ony = 0;
        var id = this.router.url.replace('/pedido/', '');
        this.produtos.forEach(car => {
          if (car['restaurante'] == id) {
            car['adicionais'].forEach(v => {
              var ftotal = Number(v['preco']) * v['quantidade'];
              this.total_carrinho = Number(this.total_carrinho) + Number(ftotal);
            });
            car['adicionais_gratis'].forEach(v => {
              var ftotal = Number(v['preco']) * v['quantidade'];
              this.total_carrinho = Number(this.total_carrinho) + Number(ftotal);
            });
            this.prices = [];
            car['adicionais_prev'].forEach(v => {
              var ftotal = Number(v['preco']) * v['quantidade'];
              this.prices.push(ftotal);
            });

            if (this.prices.length != 0) {
              this.total_carrinho = Number(this.total_carrinho) + Number(Math.max(...this.prices));
            }

            this.total_carrinho = Number(this.total_carrinho) + Number(car['preco']);
            this.total_carrinho = Number(this.total_carrinho) * Number(car['quantidade']);
            this.total_carrinho = Number(this.total_carrinho) + Number(this.frete);
          }
        });
      }

      cancelcupom() {
        this.get_total();
      }

      setcupom() {
        this.cancelcupom();

        if (this.cupomarray != null) {
          if (this.cupomarray['tipo'] == "FRETE_GRATIS") {
            this.total_carrinho = Number(this.total_carrinho) - Number(this.frete);
          } else if (this.cupomarray['tipo'] == "PORCENTAGEM") {
            var rest = Number(this.total_carrinho) * (Number(this.cupomarray['desconto']) / 100);
            this.total_carrinho = Number(this.total_carrinho) - Number(rest);
          } else if (this.cupomarray['tipo'] == "TOTAL") {
            this.total_carrinho = Number(this.total_carrinho) - Number(this.cupomarray['desconto']);
          }
        }
      }

      ionViewWillEnter() {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
      }

      limpar() {
        localStorage.clear();
      }

      rout(id) {
        this.router.navigateByUrl('/produtos/' + id);
      }

      carregando() {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.loadingController.create({
                  message: 'Carregando'
                });

              case 2:
                this.loading = _context2.sent;
                _context2.next = 5;
                return this.loading.present();

              case 5:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
      }

      makeid(length) {
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;

        for (var i = 0; i < length; i++) {
          result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }

        return result;
      }

      openlink(url) {
        this.iab.create(url, '_system');
      }

      entrega_cartao() {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var id, alert;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                id = this.router.url.replace('/pedido/', '');
                this.changefrete();

                if (!(this.frete_status == false)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return");

              case 4:
                this.setcupom();

                if (!(this.new_address == true)) {
                  _context3.next = 21;
                  break;
                }

                if (!(this.endereco == null)) {
                  _context3.next = 9;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu endereço');
                return _context3.abrupt("return");

              case 9:
                if (!(this.numero_s == null)) {
                  _context3.next = 12;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o número');
                return _context3.abrupt("return");

              case 12:
                if (!(this.bairro_s == null)) {
                  _context3.next = 15;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Selecione seu bairro');
                return _context3.abrupt("return");

              case 15:
                if (!(this.uf == null)) {
                  _context3.next = 18;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite a sua cidade');
                return _context3.abrupt("return");

              case 18:
                if (!(this.estado == null)) {
                  _context3.next = 21;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu estado');
                return _context3.abrupt("return");

              case 21:
                if (!(this.total_carrinho == this.frete)) {
                  _context3.next = 24;
                  break;
                }

                this.alert_OPS("AVISO", 'Seu carrinho está vázio', "");
                return _context3.abrupt("return", false);

              case 24:
                _context3.next = 26;
                return this.alertCtrl.create({
                  header: 'Você escolheu!',
                  subHeader: 'Para o restaurante entregar na sua casa',
                  message: 'Valor do pedido ' + this.precos(this.total_carrinho),
                  buttons: [{
                    text: 'Escolher outro',
                    role: 'cancel',
                    handler: () => {}
                  }, {
                    text: 'Confirmar',
                    handler: data => {
                      if (this.new_address == true) {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: this.frete,
                          local: id,
                          status: '',
                          estado: this.uf + "-" + this.estado,
                          de: this.myaccount['id'],
                          pagamento: 'Receber em casa',
                          nome: this.myaccount['nome'],
                          endereco: this.endereco,
                          cep: '',
                          itens: JSON.stringify(this.produtos),
                          cidade: this.uf,
                          bairro: this.bairro_s,
                          complemento: this.complemento_s,
                          numero: this.numero_s,
                          tel: this.myaccount['tel'],
                          troco: 0,
                          obs: "RCM " + this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      } else {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: this.frete,
                          local: id,
                          status: '',
                          estado: this.myaccount['cidade'] + "",
                          de: this.myaccount['id'],
                          pagamento: 'Receber em casa',
                          nome: this.myaccount['nome'],
                          endereco: this.myaccount['endereco'],
                          cep: this.myaccount['cidade'] + "",
                          itens: JSON.stringify(this.produtos),
                          cidade: this.myaccount['cidade'],
                          bairro: this.myaccount['bairro'],
                          complemento: this.myaccount['complemento'],
                          numero: this.myaccount['numero'],
                          tel: this.myaccount['tel'],
                          troco: 0,
                          obs: "RCM " + this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      }

                      this.http.setDataSerializer('json');
                      this.http.post(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/pedidos', bodys, {}).then(data => {
                        this.alert_OPS('SUCESSO!', 'Pedido realizado com sucesso', 'Atenção: O tempo e a entrega do pedido é de responsabilidade do estabelecimento');
                        localStorage.removeItem('carrinho');
                        this.navCtrl.navigateRoot('/pedidos');
                      }).catch(err => {});
                    }
                  }]
                });

              case 26:
                alert = _context3.sent;
                _context3.next = 29;
                return alert.present();

              case 29:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
      }

      entrega() {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var id, alert;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                id = this.router.url.replace('/pedido/', '');
                this.changefrete();

                if (!(this.frete_status == false)) {
                  _context4.next = 4;
                  break;
                }

                return _context4.abrupt("return");

              case 4:
                this.setcupom();

                if (!(this.new_address == true)) {
                  _context4.next = 21;
                  break;
                }

                if (!(this.endereco == null)) {
                  _context4.next = 9;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu endereço');
                return _context4.abrupt("return");

              case 9:
                if (!(this.numero_s == null)) {
                  _context4.next = 12;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o número');
                return _context4.abrupt("return");

              case 12:
                if (!(this.bairro_s == null)) {
                  _context4.next = 15;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Selecione seu bairro');
                return _context4.abrupt("return");

              case 15:
                if (!(this.uf == null)) {
                  _context4.next = 18;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite a sua cidade');
                return _context4.abrupt("return");

              case 18:
                if (!(this.estado == null)) {
                  _context4.next = 21;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu estado');
                return _context4.abrupt("return");

              case 21:
                if (!(this.check_bairro() == "true")) {
                  _context4.next = 23;
                  break;
                }

                return _context4.abrupt("return", false);

              case 23:
                if (!(this.total_carrinho == this.frete)) {
                  _context4.next = 26;
                  break;
                }

                this.alert_OPS("AVISO", 'Seu carrinho está vázio', "");
                return _context4.abrupt("return", false);

              case 26:
                _context4.next = 28;
                return this.alertCtrl.create({
                  header: 'Digite o troco!',
                  subHeader: 'Se você precisa de troco digite para quanto',
                  message: 'Valor do pedido ' + this.precos(this.total_carrinho),
                  inputs: [{
                    name: 'troco',
                    placeholder: 'Troco',
                    type: 'number'
                  }],
                  buttons: [{
                    text: 'Escolher outro',
                    role: 'cancel',
                    handler: () => {}
                  }, {
                    text: 'Pedir',
                    handler: data => {
                      if (this.new_address == true) {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: this.frete,
                          local: id,
                          status: '',
                          estado: this.uf + "-" + this.estado,
                          de: this.myaccount['id'],
                          pagamento: 'Receber em casa',
                          nome: this.myaccount['nome'],
                          endereco: this.endereco,
                          cep: '',
                          itens: JSON.stringify(this.produtos),
                          cidade: this.uf,
                          bairro: this.bairro_s,
                          complemento: this.complemento_s,
                          numero: this.numero_s,
                          tel: this.myaccount['tel'],
                          troco: data.troco,
                          obs: this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      } else {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: this.frete,
                          local: id,
                          status: '',
                          estado: this.myaccount['cidade'] + "",
                          de: this.myaccount['id'],
                          pagamento: 'Receber em casa',
                          nome: this.myaccount['nome'],
                          endereco: this.myaccount['endereco'],
                          cep: this.myaccount['cidade'] + "",
                          itens: JSON.stringify(this.produtos),
                          cidade: this.myaccount['cidade'],
                          bairro: this.myaccount['bairro'],
                          complemento: this.myaccount['complemento'],
                          numero: this.myaccount['numero'],
                          tel: this.myaccount['tel'],
                          troco: data.troco,
                          obs: this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      }

                      this.http.setDataSerializer('json');
                      this.http.post(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/pedidos', bodys, {}).then(data => {
                        this.alert_OPS('SUCESSO!', 'Pedido realizado com sucesso', 'Atenção: O tempo e a entrega do pedido é de responsabilidade do estabelecimento');
                        localStorage.removeItem('carrinho');
                        this.navCtrl.navigateRoot('/pedidos');
                      }).catch(err => {});
                    }
                  }]
                });

              case 28:
                alert = _context4.sent;
                _context4.next = 31;
                return alert.present();

              case 31:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));
      }

      buscar() {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var id, alert;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                id = this.router.url.replace('/pedido/', '');
                this.changefrete();

                if (!(this.frete_status == false)) {
                  _context5.next = 4;
                  break;
                }

                return _context5.abrupt("return");

              case 4:
                this.setcupom();

                if (!(this.new_address == true)) {
                  _context5.next = 21;
                  break;
                }

                if (!(this.endereco == null)) {
                  _context5.next = 9;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu endereço');
                return _context5.abrupt("return");

              case 9:
                if (!(this.numero_s == null)) {
                  _context5.next = 12;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o número');
                return _context5.abrupt("return");

              case 12:
                if (!(this.bairro_s == null)) {
                  _context5.next = 15;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Selecione seu bairro');
                return _context5.abrupt("return");

              case 15:
                if (!(this.uf == null)) {
                  _context5.next = 18;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite a sua cidade');
                return _context5.abrupt("return");

              case 18:
                if (!(this.estado == null)) {
                  _context5.next = 21;
                  break;
                }

                this.alert_OPS('OPS', 'Falta uma informação', 'Digite o seu estado');
                return _context5.abrupt("return");

              case 21:
                if (!(this.check_bairro() == "true")) {
                  _context5.next = 23;
                  break;
                }

                return _context5.abrupt("return", false);

              case 23:
                if (!(this.total_carrinho == this.frete)) {
                  _context5.next = 26;
                  break;
                }

                this.alert_OPS("AVISO", 'Seu carrinho está vázio', "");
                return _context5.abrupt("return", false);

              case 26:
                _context5.next = 28;
                return this.alertCtrl.create({
                  header: 'Digite o troco!',
                  subHeader: 'Se você precisa de troco digite para quanto',
                  message: 'Endereço: ' + this.restaurante['endereco'] + '<br>Valor do pedido R$' + this.precos(this.total_carrinho),
                  inputs: [{
                    name: 'troco',
                    placeholder: 'Troco',
                    type: 'number'
                  }],
                  buttons: [{
                    text: 'Escolher outro',
                    role: 'cancel',
                    handler: () => {}
                  }, {
                    text: 'Pedir',
                    handler: data => {
                      if (this.new_address == true) {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: 0,
                          local: id,
                          status: '',
                          estado: this.uf + "-" + this.estado,
                          de: this.myaccount['id'],
                          pagamento: 'Buscar no local',
                          nome: this.myaccount['nome'],
                          endereco: this.endereco,
                          cep: '',
                          itens: JSON.stringify(this.produtos),
                          cidade: this.uf,
                          bairro: this.bairro_s,
                          complemento: this.complemento_s,
                          numero: this.numero_s,
                          tel: this.myaccount['tel'],
                          troco: data.troco,
                          obs: this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      } else {
                        var bodys = {
                          code: 'no_code',
                          restaurante: id,
                          frete: 0,
                          local: id,
                          status: '',
                          estado: this.myaccount['cidade'] + "",
                          de: this.myaccount['id'],
                          pagamento: 'Buscar no local',
                          nome: this.myaccount['nome'],
                          endereco: this.myaccount['endereco'],
                          cep: this.myaccount['cidade'] + "",
                          itens: JSON.stringify(this.produtos),
                          cidade: this.myaccount['cidade'],
                          bairro: this.myaccount['bairro'],
                          complemento: this.myaccount['complemento'],
                          numero: this.myaccount['numero'],
                          tel: this.myaccount['tel'],
                          troco: data.troco,
                          obs: this.obs_s,
                          cupom: this.cupom_s,
                          horario: this.horario
                        };
                      }

                      this.http.setDataSerializer('json');
                      this.http.post(new _config__WEBPACK_IMPORTED_MODULE_8__["Config"]().local_link_api + '/api/pedidos', bodys, {}).then(data => {
                        this.alert_OPS('SUCESSO!', 'Pedido realizado com sucesso', 'Atenção: O tempo e a entrega do pedido é de responsabilidade do estabelecimento');
                        localStorage.removeItem('carrinho');
                        this.navCtrl.navigateRoot('/pedidos');
                      }).catch(err => {});
                    }
                  }]
                });

              case 28:
                alert = _context5.sent;
                _context5.next = 31;
                return alert.present();

              case 31:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this);
        }));
      }

      check_bairro() {
        return status;
      }

      routerlink_api(string) {
        this.zone.run(() => tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.navCtrl.navigateForward(string);

              case 2:
              case "end":
                return _context6.stop();
            }
          }, _callee6, this);
        })));
      }

      ngOnInit() {
        const datauser = JSON.parse(localStorage.getItem('cliente_data')); //this.alert_OPS('OPS', 'Falta uma informação', '' + data);

        if (datauser == null) {
          this.navCtrl.navigateRoot('/minha-conta/' + 'pedido');
        }
      }

      alert_OPS(header, subheader, message) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var alert;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.alertCtrl.create({
                  header: header,
                  subHeader: subheader,
                  message: message,
                  buttons: ['OK']
                });

              case 2:
                alert = _context7.sent;
                _context7.next = 5;
                return alert.present();

              case 5:
              case "end":
                return _context7.stop();
            }
          }, _callee7, this);
        }));
      }

      remove_item(item) {
        this.alert_OPS("AVISO", "Item removido", "");
        var index = this.produtos.indexOf(item);
        this.produtos.splice(index, 1);
        localStorage.setItem('carrinho', JSON.stringify(this.produtos));
        this.total_carrinho = 0;
        var product_ony = 0;
        this.produtos.forEach(car => {
          product_ony = 0;
          product_ony = Number(product_ony) + Number(car['preco']); //this.total_carrinho = Number(this.total_carrinho) + Number(car['preco']);

          car['adicionais'].forEach(add => {
            this.adicionais.push({
              preco: add['preco']
            }); //this.total_carrinho = Number(this.total_carrinho) + Number(add['preco']);

            product_ony = Number(product_ony) + Number(add['preco']);
          });
          product_ony = Number(car['quantidade']) * Number(product_ony);
          this.total_carrinho = Number(this.total_carrinho) + Number(product_ony);
        });
        this.total_carrinho = Number(this.total_carrinho) + Number(this.frete);
      }

    };

    PedidoPage.ctorParameters = () => [{
      type: ngx_xml2json__WEBPACK_IMPORTED_MODULE_6__["NgxXml2jsonService"]
    }, {
      type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["AlertController"]
    }, {
      type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]
    }, {
      type: _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"]
    }, {
      type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_4__["HTTP"]
    }, {
      type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["LoadingController"]
    }, {
      type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["NavController"]
    }, {
      type: _ionic_native_in_app_browser_ngx__WEBPACK_IMPORTED_MODULE_7__["InAppBrowser"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    PedidoPage = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'app-pedido',
      template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! raw-loader!./pedido.page.html */
      "./node_modules/raw-loader/dist/cjs.js!./src/app/pedido/pedido.page.html")).default,
      styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! ./pedido.page.scss */
      "./src/app/pedido/pedido.page.scss")).default]
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [ngx_xml2json__WEBPACK_IMPORTED_MODULE_6__["NgxXml2jsonService"], _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["AlertController"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_4__["HTTP"], _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["LoadingController"], _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["NavController"], _ionic_native_in_app_browser_ngx__WEBPACK_IMPORTED_MODULE_7__["InAppBrowser"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], PedidoPage);
    /***/
  }
}]);
//# sourceMappingURL=pedido-pedido-module-es5.js.map